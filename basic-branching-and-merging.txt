https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging

Branching And Merging Workflow - Real World Example

1. Do some work on a website.

2. Create a branch for a new user story you're working on. 

3. Do some work in that branch

But, you receive a call that another issue is critical and you need a 'hotfix'; Now do:

1. Switch to your production branch

2. Create a branch to add the hotfix.

3. After it's tested, merge the hotfix branch, and push to production.

4. Switch back to your original user story and continue working.


Companies Have Issue-Tracking System: 

iss will be short for issue followed by -<number> to indicate the issue number the branch is dealing with, resolving:

Create A Branch and Simultaneously Switch To It: 

git switch -b <new-branch-name>

git switch -b iss-53

"If your working directory or staging area has uncommited changes that conflict with the branch you're checking out, Git won't let you switch branches."

When you switch branches, 

- the Working Directory is set back to the way it was before the new branch or any branch was created or edited. 

- the Working Directory will look like the last commit in it.

hotfix-branch-for-main website was created:

- hotfix issue has been resolved and tested. 

- 'Fixed broken email address' and 'broken footer'

- Commit: 'Hotfix Issue Has Been Fixed and Tested; Ready To Merge'

Fast-forward Merge: 

If a commit in a new branch is immediately after a commit on the main branch, Git will just move the HEAD pointer to the commit that is ahead on the new branch. 

If No Divergent Work on a branch, If the branch is a Direct Ancestor, Git Just moves the pointer (HEAD) to the commit of the branch that was merged in. 

Now you can Delete Hotfix Branch the hotfix branch, in my case, hotfix-branch-for-main:

- you can delete the hotfix branch because you no longer need it since it is merged into main, master and the master, main branch points to the same place, commit of the hotfix branch. 

Delete Branch

git branch -d <branchname>

git branch -d hotfix-branch-for-main

Note: 

The work done in the hotfix-branch-for-main that was merged into main, is not in the the older branch, so you can do one of two things: 

1. If you need to pull in the main, master branch (that the hotfix was merged into), you merge your master branch into your iss53 branch by:

git switch iss-53

git merge master

or you can

continue working on the iss-53 branch and then pull the iss53 branch back into master laster.

Basic Merging: 

git switch <to-branch-you-want-to-merge-to>

git merge <branch-you-want-to-merge-in>



Merge Older Branch, Divergent Branch, Do A Merge Commit: 

- go to the branch you want to merge it in with and run:

git merge <branch-name>

git merge iss-53 

"Git does a simple three-way merge, using the two snapshots pointed to by the branch tips and the common ancestor of the two."

Merge Commits' have more than one parent. 

Upon Successful Merge, Delete Branch That Was Merged in

git branch -d <merged-in-branch>

git branch -d iss-53 



Basic Merge Conflicts: 

- If the same file in differen branches is changed, you'll get a merge-conflict.

To See Unmerged Files (that have merge conflicts or aren't resolved) run

- git status

The open the files with conflicts manually and fix them.

You have to choose between the two options given in the file that are between

<<<<<< HEAD:fileName
content in main file
=====
content in file to be merged in
>>>>>>>> branch:fileName

or you can

delete <<<<<, =======, and >>>>> and everything within them and replace it with a combination of the to choices of content or something else you want. 

Example: 

delete from here: 
<<<<<<<< HEAD:file-name
content
=========
content
>>>>>>>> branch:file-name
delete to here.

replace with 

new content. 

After Implementing One of the options, choices above, run: 

git add <on-each-file-with-conflict-resolved> 

to mark it as resolved. 


Graphical Tool Can Resolve The Merge Conflict Too:

git mergetool

It's a Visual Merge Tool to walk you through the file conflicts. 

git mergetool 

list the tools that are available, just type the tool's name and it will run or just hit enter, return to run the default mergetool.

If merege was successful, type yes (I guess)

run git status again 

to make sure all conflicts are resolved. 

Evertyhing All Conflicts Are Resolved And The Resoved-Conflict-files are staged, 
you can run 

git commit

the default merge-commit message: 

Merge branch 'branch-name'

You can include information in the defalut merge-commit about how you resolved the merge and explain unobvious changes you made.

